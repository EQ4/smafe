#! /bin/sh
### BEGIN INIT INFO
# Provides:          smafewrapd, smafedistd
# Required-Start:    $remote_fs
# Required-Stop:     $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: initscript for smafe daemons
# Id:                $Id$
### END INIT INFO

# Author: Ewald Peiszer, <peiszer@spectralmind.com>
#
# Note: DAEMON1 is smafewrapd, DAEMON2 is smafedistd

# Do NOT "set -e"


# get folder where this file is in
# NOTE: we get the canonicalized name (ie, we follow the symlink and get the directory of the "real" file
# Example:
# this script is executed as /etc/rc2.d/S20smafed which is a symlink to the hard link /etc/init.d/smafed
# $dirname should then be "/etc/init.d/" 
dirname=$(dirname $(readlink --canonicalize $0) )
tmp="${dirname#?}"

if [ "${dirname%$tmp}" != "/" ]; then
	dirname=$PWD/$dirname
fi

### include stuff that has been generated by setup
# system specific stuff (folder...)

. $dirname/smafed.conf


DESC="Spectralmind's Smafe system"
NAME1=smafewrapd
NAME2=smafedistd

# binary
DAEMON1=$DAEMONPATH/bin/bin-internal/$NAME1
# for --startas
DAEMON1_START=$DAEMONPATH/bin/$NAME1.sh

# binary
DAEMON2=$DAEMONPATH/bin/bin-internal/$NAME2
# for --startas
DAEMON2_START=$DAEMONPATH/bin/$NAME2.sh


SCRIPTNAME=$dirname/smafed

# Exit if the package is not installed
#[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
# smafe: no default configuration
#[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

#
# Functions that start the daemons/services
#
do_start1()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	start-stop-daemon --start --verbose --exec $DAEMON1 --startas $DAEMON1_START --chuid $DAEMON_CHUID --chdir $DAEMONPATH  --test   \
		|| return 1
	start-stop-daemon --start --verbose --exec $DAEMON1 --startas $DAEMON1_START --chuid $DAEMON_CHUID --chdir $DAEMONPATH  -- \
		$DAEMON1_ARGS \
		|| return 2
	# Add code here, if necessary, that waits for the process to be ready
	# to handle requests from services started subsequently which depend
	# on this one.  As a last resort, sleep for some time.
}
#
# 
#
do_start2()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	start-stop-daemon --start --verbose --exec $DAEMON2 --startas $DAEMON2_START --chuid $DAEMON_CHUID --chdir $DAEMONPATH  --test   \
		|| return 1
	start-stop-daemon --start --verbose --exec $DAEMON2 --startas $DAEMON2_START --chuid $DAEMON_CHUID --chdir $DAEMONPATH  -- \
		$DAEMON2_ARGS \
		|| return 2
	# Add code here, if necessary, that waits for the process to be ready
	# to handle requests from services started subsequently which depend
	# on this one.  As a last resort, sleep for some time.
}

#
# Functions that stop the daemons/services
#
do_stop1()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --verbose --retry=TERM/30/KILL/5 --exec $DAEMON1   --chdir $DAEMONPATH
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
	start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON1 --chdir $DAEMONPATH
	[ "$?" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	#rm -f $PIDFILE
	return "$RETVAL"
}
do_stop2()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	# edit EP: #254. No KILL signal
	start-stop-daemon --stop --verbose --retry=TERM/30 --exec $DAEMON2   --chdir $DAEMONPATH
	RETVAL="$?"
	if [ "$RETVAL" = 2 ]; then
		echo "Process $DAEMON2 could not be stopped within 30 seconds. Probably the index is being re-created. You can check with $0 status later on."
		return 2
	fi
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
	start-stop-daemon --stop --quiet --oknodo --retry=0/30 --exec $DAEMON2 --chdir $DAEMONPATH
	[ "$?" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	#rm -f $PIDFILE
	return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
#do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
#	start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
#	return 0
#}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start1
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 


		do_start2
		case "$?" in
			0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
			2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
		esac ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac

	;;

  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop1
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac

	do_stop2
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  #reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	#log_daemon_msg "Reloading $DESC" "$NAME"
	#do_reload
	#log_end_msg $?
	#;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop1
	do_stop2
	case "$?" in
	  0|1)
			do_start1
			case "$?" in
				0|1) [ "$VERBOSE" != no ] && log_end_msg 0 


					do_start2
					case "$?" in
						0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
						2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
					esac ;;
				2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
			esac
	
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;

  status)
	# find pids
	DAEMON1_PID=$(pidof $DAEMON1)
	DAEMON2_PID=$(pidof $DAEMON2)

	# check if both pids are available:
	if [ -n "$DAEMON1_PID" ]; then

		# echo pids
		echo PID of smafewrapd: $DAEMON1_PID
		#echo "Smafe daemons running with PIDS: $DAEMON1_PID (=smafewrapd) and $DAEMON2_PID (=smafedistd)"
		
		# guess logfile: get most recent logfile in daemon path
		# ls -1t sorts files by modified timestamp and puts one file per line
		LOGFILE1=$(ls -1t $DAEMONPATH/smafewrapd*log 2> /dev/null |head -n 1)
		if [  "$LOGFILE1" != "" ]; then
			echo Assuming active log file: $LOGFILE1
			# start time
			echo -n "Daemon started at: "
			head -n 1 $LOGFILE1 | cut -d " " -f 1-2 
			# grep status log entries
			grep "open" $LOGFILE1 | grep -v -- "-1 " | tail -n 6
			# Estimated end time check in last 100 lines and get the last one
			tail -n 100 $LOGFILE1  | grep "Estimated end time" | tail -n 1
			# grep latest status: we assume that in the last 5 lines there are the "sleep" and related lines
			tail -n 5 $LOGFILE1 | grep "Going to sleep"
			tail -n 5 $LOGFILE1 | grep "Will stop daemon after"
			tail -n 5 $LOGFILE1 | grep "Daemon says Good Bye"
		else
        	echo "WARNING: No logfile found for smafewrapd"
        fi # logfile found
	else
		echo "WARNING: smafewrapd daemon NOT running."
	fi #if [ -n "$DAEMON1_PID" ]; then
	
	echo
	
	if [ -n "$DAEMON2_PID" ]; then
		# echo pids
		echo PID of smafedistd: $DAEMON2_PID
		
		LOGFILE2=$(ls -1t $DAEMONPATH/smafedistd*log 2> /dev/null |head -n 1)
		if [  "$LOGFILE2" != "" ]; then
			echo Assuming active log file: $LOGFILE2
			# start time
			echo -n "Daemon started at: "
			head -n 1 $LOGFILE2 | cut -d " " -f 1-2 
			tail -n 100 $LOGFILE2 | grep "open task(s)" | grep -v -- "-1 " | tail -n 2
			# Last finished job
			tail -n 100 $LOGFILE2  | grep "Finished task: " | tail -n 1
			# grep latest status: we assume that in the last 5 lines there are the "sleep" and related lines
			tail -n 5 $LOGFILE2 | grep "Going to sleep"
			tail -n 5 $LOGFILE2 | grep "Will stop daemon after"
			tail -n 5 $LOGFILE2 | grep "Daemon says Good Bye"
		else
        	echo "WARNING: No logfile found for smafedistd"
        fi  # logfile found
	else
		echo "WARNING: smafedistd daemon NOT running."
	fi #if [ -n "$DAEMON2_PID" ]; then

	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|restart|force-reload}" >&2
	exit 3
	;;
esac

:
